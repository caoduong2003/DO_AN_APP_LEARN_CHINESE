package com.example.app_learn_chinese_2025.util;

import android.content.Context;
import android.net.wifi.WifiManager;
import android.util.Log;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * üöÄ Smart Constants - T·ª± ƒë·ªông ph√°t hi·ªán server URL
 * Kh√¥ng c·∫ßn can thi·ªáp th·ªß c√¥ng, ho√†n to√†n t·ª± ƒë·ªông!
 */
public class Constants {
    private static final String TAG = "SMART_CONSTANTS";

    // üéØ Fallback URLs cho c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    private static final String EMULATOR_URL = "http://10.0.2.2:8080/";
    private static final String DEFAULT_REAL_DEVICE_URL = "http://192.168.10.69:8080/";
    private static final String LOCALHOST_URL = "http://localhost:8080/";

    // üîÑ Dynamic server URL - s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông detect
    private static volatile String detectedServerUrl = null;
    private static volatile boolean isDetecting = false;
    private static final AtomicBoolean hasDetected = new AtomicBoolean(false);
    private static Context appContext = null;

    // üì± Danh s√°ch c√°c IP patterns ƒë·ªÉ test
    private static final String[] IP_PATTERNS = {
            "10.0.2.2",        // Android Emulator
            "127.0.0.1",       // Localhost
            "192.168.1.%d",    // Common home network
            "192.168.0.%d",    // Another common network
            "192.168.50.%d",   // Your current network
            "10.0.0.%d",       // Corporate network
            "172.16.0.%d"      // Private network
    };

    private static final int[] PORTS = {8080, 8081, 9090, 3000};

    // API paths (kh√¥ng thay ƒë·ªïi)
    public static final String API_BAI_GIANG = "api/baigiang/";
    public static final String API_LOAI_BAI_GIANG = "api/loaibaigiang/";
    public static final String API_CAP_DO_HSK = "api/capdohsk/";
    public static final String API_CHU_DE = "api/chude/";
    public static final String API_UPLOAD_IMAGE = "api/media/upload/image";
    public static final String API_UPLOAD_VIDEO = "api/media/upload/video";
    public static final String API_VIEW_IMAGE = "api/media/image/";
    public static final String API_STREAM_VIDEO = "api/media/video/";
    public static final String API_DEBUG_TEST = "api/files/debug/test";
    public static final String API_DEBUG_LIST = "api/files/debug/list";
    public static final String API_TEST_PING = "api/test/ping";

    // SharedPreferences keys
    public static final String PREF_NAME = "AppPrefs";
    public static final String KEY_TOKEN = "token";
    public static final String KEY_USER_ID = "user_id";
    public static final String KEY_USERNAME = "username";
    public static final String KEY_EMAIL = "email";
    public static final String KEY_ROLE = "role";

    // Role constants
    public static final int ROLE_ADMIN = 0;
    public static final int ROLE_TEACHER = 1;
    public static final int ROLE_STUDENT = 2;

    // File extensions
    public static final String IMAGE_EXTENSION = ".png";
    public static final String VIDEO_EXTENSION = ".mp4";

    /**
     * üéØ MAIN METHOD - L·∫•y BASE_URL (t·ª± ƒë·ªông ph√°t hi·ªán)
     * ƒê√¢y l√† method ch√≠nh m√† t·∫•t c·∫£ code kh√°c s·∫Ω g·ªçi
     */
    public static String getBaseUrl() {
        // N·∫øu ƒë√£ detect th√†nh c√¥ng, tr·∫£ v·ªÅ ngay
        if (detectedServerUrl != null) {
            return detectedServerUrl;
        }

        // N·∫øu ƒëang trong qu√° tr√¨nh detect, tr·∫£ v·ªÅ fallback
        if (isDetecting) {
            return getFallbackUrl();
        }

        // B·∫Øt ƒë·∫ßu auto-detect (async)
        startAutoDetection();

        // Tr·∫£ v·ªÅ fallback trong l√∫c ch·ªù
        return getFallbackUrl();
    }

    /**
     * üîÑ Kh·ªüi t·∫°o context (g·ªçi t·ª´ Application class)
     */
    public static void initialize(Context context) {
        appContext = context.getApplicationContext();
        Log.d(TAG, "üöÄ Smart Constants initialized");

        // B·∫Øt ƒë·∫ßu detect ngay
        startAutoDetection();
    }

    /**
     * üîç B·∫Øt ƒë·∫ßu qu√° tr√¨nh auto-detection
     */
    private static void startAutoDetection() {
        if (isDetecting || hasDetected.get()) {
            return;
        }

        isDetecting = true;
        Log.d(TAG, "üîç Starting server auto-detection...");

        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(() -> {
            try {
                String foundUrl = detectServerUrl();
                if (foundUrl != null) {
                    detectedServerUrl = foundUrl;
                    hasDetected.set(true);
                    Log.d(TAG, "‚úÖ Server auto-detected: " + foundUrl);
                } else {
                    Log.w(TAG, "‚ùå No server found, using fallback");
                }
            } catch (Exception e) {
                Log.e(TAG, "‚ùå Detection failed: " + e.getMessage());
            } finally {
                isDetecting = false;
                executor.shutdown();
            }
        });
    }

    /**
     * üéØ Logic ch√≠nh ƒë·ªÉ detect server
     */
    private static String detectServerUrl() {
        Log.d(TAG, "üîç Scanning for servers...");

        // 1. Test emulator IP tr∆∞·ªõc (n·∫øu l√† emulator)
        if (isEmulator()) {
            Log.d(TAG, "üì± Detected emulator, testing emulator IP...");
            if (testUrl(EMULATOR_URL)) {
                return EMULATOR_URL;
            }
        }

        // 2. Test localhost
        if (testUrl(LOCALHOST_URL)) {
            return LOCALHOST_URL;
        }

        // 3. Test IP hi·ªán t·∫°i c·ªßa device (t·ª´ WiFi)
        String deviceIp = getDeviceWifiIp();
        if (deviceIp != null) {
            String subnet = deviceIp.substring(0, deviceIp.lastIndexOf('.'));
            Log.d(TAG, "üì° Device subnet: " + subnet + ".x");

            // Test m·ªôt s·ªë IP trong subnet
            for (int i = 1; i <= 254; i++) {
                for (int port : PORTS) {
                    String testUrl = "http://" + subnet + "." + i + ":" + port + "/";
                    if (testUrl(testUrl)) {
                        return testUrl;
                    }
                }
            }
        }

        // 4. Test c√°c pattern IP th∆∞·ªùng g·∫∑p
        for (String pattern : IP_PATTERNS) {
            if (pattern.contains("%d")) {
                for (int i = 1; i <= 254; i++) {
                    for (int port : PORTS) {
                        String ip = String.format(pattern, i);
                        String testUrl = "http://" + ip + ":" + port + "/";
                        if (testUrl(testUrl)) {
                            return testUrl;
                        }
                    }
                }
            } else {
                for (int port : PORTS) {
                    String testUrl = "http://" + pattern + ":" + port + "/";
                    if (testUrl(testUrl)) {
                        return testUrl;
                    }
                }
            }
        }

        Log.w(TAG, "‚ùå No server found in scan");
        return null;
    }

    /**
     * üß™ Test m·ªôt URL c·ª• th·ªÉ
     */
    private static boolean testUrl(String baseUrl) {
        try {
            // Test ping endpoint
            URL url = new URL(baseUrl + API_TEST_PING);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(800);  // Timeout ng·∫Øn ƒë·ªÉ scan nhanh
            connection.setReadTimeout(800);

            int responseCode = connection.getResponseCode();
            boolean isValid = (responseCode == 200);

            if (isValid) {
                Log.d(TAG, "‚úÖ Found server at: " + baseUrl);
            }

            connection.disconnect();
            return isValid;

        } catch (Exception e) {
            // Kh√¥ng log error ƒë·ªÉ tr√°nh spam (v√¨ s·∫Ω test r·∫•t nhi·ªÅu URL)
            return false;
        }
    }

    /**
     * ü§ñ Ki·ªÉm tra c√≥ ph·∫£i emulator kh√¥ng
     */
    private static boolean isEmulator() {
        return android.os.Build.FINGERPRINT.startsWith("generic") ||
                android.os.Build.FINGERPRINT.startsWith("unknown") ||
                android.os.Build.MODEL.contains("google_sdk") ||
                android.os.Build.MODEL.contains("Emulator") ||
                android.os.Build.MODEL.contains("Android SDK built for x86") ||
                android.os.Build.MANUFACTURER.contains("Genymotion") ||
                (android.os.Build.BRAND.startsWith("generic") && android.os.Build.DEVICE.startsWith("generic")) ||
                "google_sdk".equals(android.os.Build.PRODUCT);
    }

    /**
     * üì° L·∫•y IP c·ªßa device t·ª´ WiFi
     */
    private static String getDeviceWifiIp() {
        if (appContext == null) return null;

        try {
            WifiManager wifiManager = (WifiManager) appContext.getSystemService(Context.WIFI_SERVICE);
            if (wifiManager != null) {
                int ipAddress = wifiManager.getConnectionInfo().getIpAddress();
                if (ipAddress != 0) {
                    return String.format("%d.%d.%d.%d",
                            (ipAddress & 0xff),
                            (ipAddress >> 8 & 0xff),
                            (ipAddress >> 16 & 0xff),
                            (ipAddress >> 24 & 0xff));
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "Failed to get WiFi IP: " + e.getMessage());
        }
        return null;
    }

    /**
     * üîÑ Fallback URL logic
     */
    private static String getFallbackUrl() {
        if (!isEmulator()) {
            return DEFAULT_REAL_DEVICE_URL;
        }
        return EMULATOR_URL;
    }

    /**
     * üéØ Build image URL
     */
    public static String getCorrectImageUrl(String imageUrl) {
        if (imageUrl == null || imageUrl.isEmpty()) {
            return null;
        }

        if (imageUrl.startsWith("http://") || imageUrl.startsWith("https://")) {
            return imageUrl;
        }

        String fileName = extractFileName(imageUrl);
        if (!fileName.endsWith(IMAGE_EXTENSION)) {
            fileName += IMAGE_EXTENSION;
        }

        return getBaseUrl() + API_VIEW_IMAGE + fileName;
    }

    /**
     * üéØ Build video URL
     */
    public static String getCorrectVideoUrl(String videoUrl) {
        if (videoUrl == null || videoUrl.isEmpty()) {
            return null;
        }

        if (videoUrl.startsWith("http://") || videoUrl.startsWith("https://")) {
            return videoUrl;
        }

        String fileName = extractFileName(videoUrl);
        if (!fileName.endsWith(VIDEO_EXTENSION)) {
            fileName += VIDEO_EXTENSION;
        }

        return getBaseUrl() + API_STREAM_VIDEO + fileName;
    }

    /**
     * üîß Extract filename t·ª´ path
     */
    private static String extractFileName(String filePath) {
        if (filePath == null || filePath.isEmpty()) {
            return "";
        }

        if (filePath.startsWith("/uploads/videos/")) {
            filePath = filePath.substring("/uploads/videos/".length());
        } else if (filePath.startsWith("/uploads/images/")) {
            filePath = filePath.substring("/uploads/images/".length());
        } else if (filePath.startsWith("uploads/videos/")) {
            filePath = filePath.substring("uploads/videos/".length());
        } else if (filePath.startsWith("uploads/images/")) {
            filePath = filePath.substring("uploads/images/".length());
        } else if (filePath.contains("/")) {
            filePath = filePath.substring(filePath.lastIndexOf("/") + 1);
        }

        return filePath;
    }

    // üîß Helper methods ƒë·ªÉ build URLs
    public static String getImageUploadUrl() {
        return getBaseUrl() + API_UPLOAD_IMAGE;
    }

    public static String getVideoUploadUrl() {
        return getBaseUrl() + API_UPLOAD_VIDEO;
    }

    public static String getTestPingUrl() {
        return getBaseUrl() + API_TEST_PING;
    }

    public static String getDebugTestUrl() {
        return getBaseUrl() + API_DEBUG_TEST;
    }

    public static String getDebugListUrl() {
        return getBaseUrl() + API_DEBUG_LIST;
    }

    /**
     * üîÑ Force re-detection (n·∫øu c·∫ßn)
     */
    public static void forceReDetection() {
        detectedServerUrl = null;
        hasDetected.set(false);
        isDetecting = false;
        Log.d(TAG, "üîÑ Forcing re-detection...");
        startAutoDetection();
    }

    /**
     * üìä Debug info
     */
    public static String getDebugInfo() {
        return "Detected: " + detectedServerUrl +
                ", Fallback: " + getFallbackUrl() +
                ", Current: " + getBaseUrl() +
                ", Emulator: " + isEmulator() +
                ", WiFi IP: " + getDeviceWifiIp();
    }

    // Legacy support
    @Deprecated
    public static String getFullVideoUrl(String videoUrl) {
        return getCorrectVideoUrl(videoUrl);
    }

    @Deprecated
    public static String getFullImageUrl(String imageUrl) {
        return getCorrectImageUrl(imageUrl);
    }

    // Compatibility v·ªõi code c≈©
    public static final String BASE_URL = getBaseUrl(); // Deprecated, d√πng getBaseUrl() thay th·∫ø
}