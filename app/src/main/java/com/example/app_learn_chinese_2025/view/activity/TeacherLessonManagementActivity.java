package com.example.app_learn_chinese_2025.view.activity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.example.app_learn_chinese_2025.R;
import com.example.app_learn_chinese_2025.controller.TeacherBaiGiangController;
import com.example.app_learn_chinese_2025.model.remote.ApiService;
import com.example.app_learn_chinese_2025.model.remote.TeacherBaiGiangService;
import com.example.app_learn_chinese_2025.util.SessionManager;
import com.example.app_learn_chinese_2025.view.adapter.TeacherLessonAdapter;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.util.ArrayList;
import java.util.List;

/**
 * üéØ Activity qu·∫£n l√Ω b√†i gi·∫£ng c·ªßa gi√°o vi√™n
 * Hi·ªÉn th·ªã danh s√°ch, th√™m/s·ª≠a/x√≥a b√†i gi·∫£ng
 */
public class TeacherLessonManagementActivity extends AppCompatActivity
        implements TeacherBaiGiangController.OnTeacherBaiGiangListener,
        TeacherLessonAdapter.OnLessonActionListener {

    private static final String TAG = "TeacherLessonManagement";
    private static final int REQUEST_ADD_LESSON = 1001;
    private static final int REQUEST_EDIT_LESSON = 1002;

    // UI Components
    private Toolbar toolbar;
    private SwipeRefreshLayout swipeRefresh;
    private RecyclerView rvLessons;
    private TextView tvEmptyMessage, tvStats;
    private ProgressBar progressBar;
    private FloatingActionButton fabAdd;

    // Data & Controllers
    private SessionManager sessionManager;
    private TeacherBaiGiangController controller;
    private TeacherLessonAdapter adapter;
    private List<ApiService.TeacherBaiGiangResponse.SimpleResponse> lessonList;

    // Pagination
    private int currentPage = 0;
    private boolean isLoading = false;
    private boolean hasMoreData = true;

    // Search
    private String currentSearchQuery = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_teacher_lesson_management);

        Log.d(TAG, "üöÄ onCreate started");

        // Ki·ªÉm tra quy·ªÅn gi√°o vi√™n
        sessionManager = new SessionManager(this);
        if (sessionManager.getUserRole() != com.example.app_learn_chinese_2025.util.Constants.ROLE_TEACHER) {
            Toast.makeText(this, "Ch·ªâ gi·∫£ng vi√™n c√≥ quy·ªÅn truy c·∫≠p", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }

        initViews();
        setupToolbar();
        setupRecyclerView();
        setupListeners();
        loadLessons();
        loadStatistics();
    }

    // ===== INITIALIZATION METHODS =====

    private void initViews() {
        toolbar = findViewById(R.id.toolbar);
        swipeRefresh = findViewById(R.id.swipeRefresh);
        rvLessons = findViewById(R.id.rvLessons);
        tvEmptyMessage = findViewById(R.id.tvEmptyMessage);
        tvStats = findViewById(R.id.tvStats);
        progressBar = findViewById(R.id.progressBar);
        fabAdd = findViewById(R.id.fabAdd);

        // Initialize controllers
        controller = new TeacherBaiGiangController(this, this);
        lessonList = new ArrayList<>();

        Log.d(TAG, "‚úÖ Views initialized");
    }

    private void setupToolbar() {
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setTitle("Qu·∫£n l√Ω b√†i gi·∫£ng");
        }
    }

    private void setupRecyclerView() {
        adapter = new TeacherLessonAdapter(this, lessonList, this);
        rvLessons.setLayoutManager(new LinearLayoutManager(this));
        rvLessons.setAdapter(adapter);

        // Setup pagination
        rvLessons.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);

                LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
                if (layoutManager != null && !isLoading && hasMoreData) {
                    int visibleItemCount = layoutManager.getChildCount();
                    int totalItemCount = layoutManager.getItemCount();
                    int firstVisibleItemPosition = layoutManager.findFirstVisibleItemPosition();

                    if ((visibleItemCount + firstVisibleItemPosition) >= totalItemCount - 3) {
                        loadMoreLessons();
                    }
                }
            }
        });

        Log.d(TAG, "‚úÖ RecyclerView setup completed");
    }

    private void setupListeners() {
        // Swipe to refresh
        swipeRefresh.setOnRefreshListener(() -> {
            currentPage = 0;
            hasMoreData = true;
            loadLessons();
        });

        // FAB click
        fabAdd.setOnClickListener(v -> {
            Intent intent = new Intent(this, TeacherCreateEditLessonActivity.class);
            startActivityForResult(intent, REQUEST_ADD_LESSON);
        });

        Log.d(TAG, "‚úÖ Listeners setup completed");
    }

// ===== MENU HANDLING =====

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_teacher_lesson_management, menu);

        // Setup search
        MenuItem searchItem = menu.findItem(R.id.action_search);
        if (searchItem != null) {
            SearchView searchView = (SearchView) searchItem.getActionView();
            if (searchView != null) {
                searchView.setQueryHint("T√¨m ki·∫øm b√†i gi·∫£ng...");
                searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                    @Override
                    public boolean onQueryTextSubmit(String query) {
                        searchLessons(query);
                        return true;
                    }

                    @Override
                    public boolean onQueryTextChange(String newText) {
                        if (newText.length() == 0) {
                            currentSearchQuery = "";
                            currentPage = 0;
                            loadLessons();
                        }
                        return true;
                    }
                });
            }
        }

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int itemId = item.getItemId();

        if (itemId == android.R.id.home) {
            onBackPressed();
            return true;
        } else if (itemId == R.id.action_refresh) {
            refreshData();
            return true;
        } else if (itemId == R.id.action_statistics) {
            loadStatistics();
            return true;
        } else if (itemId == R.id.action_filter) {
            showFilterDialog();
            return true;
        } else if (itemId == R.id.action_sort) {
            showSortDialog();
            return true;
        } else if (itemId == R.id.action_export) {
            exportLessons();
            return true;
        } else {
            return super.onOptionsItemSelected(item);
        }
    }

// ===== ADDITIONAL MENU ACTION METHODS =====

    private void showFilterDialog() {
        // Create filter options
        String[] filterOptions = {
                "T·∫•t c·∫£ b√†i gi·∫£ng",
                "Ch·ªâ b√†i c√¥ng khai",
                "Ch·ªâ b√†i ·∫©n",
                "Ch·ªâ b√†i Premium",
                "Ch·ªâ b√†i mi·ªÖn ph√≠"
        };

        new AlertDialog.Builder(this)
                .setTitle("L·ªçc b√†i gi·∫£ng")
                .setItems(filterOptions, (dialog, which) -> {
                    applyFilter(which);
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void showSortDialog() {
        // Create sort options
        String[] sortOptions = {
                "M·ªõi nh·∫•t",
                "C≈© nh·∫•t",
                "Nhi·ªÅu l∆∞·ª£t xem nh·∫•t",
                "√çt l∆∞·ª£t xem nh·∫•t",
                "Theo t√™n A-Z",
                "Theo t√™n Z-A"
        };

        new AlertDialog.Builder(this)
                .setTitle("S·∫Øp x·∫øp b√†i gi·∫£ng")
                .setItems(sortOptions, (dialog, which) -> {
                    applySorting(which);
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void exportLessons() {
        if (lessonList.isEmpty()) {
            Toast.makeText(this, "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t", Toast.LENGTH_SHORT).show();
            return;
        }

        new AlertDialog.Builder(this)
                .setTitle("Xu·∫•t d·ªØ li·ªáu")
                .setMessage("Xu·∫•t danh s√°ch " + lessonList.size() + " b√†i gi·∫£ng?")
                .setPositiveButton("Xu·∫•t", (dialog, which) -> {
                    performExport();
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void applyFilter(int filterType) {
        currentPage = 0;
        hasMoreData = true;

        Boolean trangThaiFilter = null;
        Boolean premiumFilter = null;

        switch (filterType) {
            case 0: // T·∫•t c·∫£
                trangThaiFilter = null;
                premiumFilter = null;
                break;
            case 1: // C√¥ng khai
                trangThaiFilter = true;
                break;
            case 2: // ·∫®n
                trangThaiFilter = false;
                break;
            case 3: // Premium
                premiumFilter = true;
                break;
            case 4: // Mi·ªÖn ph√≠
                premiumFilter = false;
                break;
        }

        // Clear current list
        lessonList.clear();
        adapter.notifyDataSetChanged();

        // Load with new filter
        controller.getMyBaiGiangs(currentPage, 10, "ngayTao", "desc",
                currentSearchQuery.isEmpty() ? null : currentSearchQuery,
                null, null, null, trangThaiFilter);

        // Show filter applied message
        Toast.makeText(this, "√Åp d·ª•ng b·ªô l·ªçc: " + getFilterName(filterType), Toast.LENGTH_SHORT).show();
    }

    private void applySorting(int sortType) {
        currentPage = 0;
        hasMoreData = true;

        String sortBy = "ngayTao";
        String sortDir = "desc";

        switch (sortType) {
            case 0: // M·ªõi nh·∫•t
                sortBy = "ngayTao";
                sortDir = "desc";
                break;
            case 1: // C≈© nh·∫•t
                sortBy = "ngayTao";
                sortDir = "asc";
                break;
            case 2: // Nhi·ªÅu l∆∞·ª£t xem
                sortBy = "luotXem";
                sortDir = "desc";
                break;
            case 3: // √çt l∆∞·ª£t xem
                sortBy = "luotXem";
                sortDir = "asc";
                break;
            case 4: // T√™n A-Z
                sortBy = "tieuDe";
                sortDir = "asc";
                break;
            case 5: // T√™n Z-A
                sortBy = "tieuDe";
                sortDir = "desc";
                break;
        }

        // Clear current list
        lessonList.clear();
        adapter.notifyDataSetChanged();

        // Load with new sorting
        controller.getMyBaiGiangs(currentPage, 10, sortBy, sortDir,
                currentSearchQuery.isEmpty() ? null : currentSearchQuery,
                null, null, null, null);

        // Show sort applied message
        Toast.makeText(this, "S·∫Øp x·∫øp: " + getSortName(sortType), Toast.LENGTH_SHORT).show();
    }

    private void performExport() {
        // Simple text export - you can enhance this to CSV/Excel
        StringBuilder exportData = new StringBuilder();
        exportData.append("DANH S√ÅCH B√ÄI GI·∫¢NG\n");
        exportData.append("===================\n\n");

        for (int i = 0; i < lessonList.size(); i++) {
            ApiService.TeacherBaiGiangResponse.SimpleResponse lesson = lessonList.get(i);
            exportData.append((i + 1)).append(". ").append(lesson.getTieuDe()).append("\n");
            exportData.append("   M√¥ t·∫£: ").append(lesson.getMoTa() != null ? lesson.getMoTa() : "Kh√¥ng c√≥").append("\n");
            exportData.append("   L∆∞·ª£t xem: ").append(lesson.getLuotXem() != null ? lesson.getLuotXem() : 0).append("\n");
            exportData.append("   Tr·∫°ng th√°i: ").append(lesson.getTrangThai() ? "C√¥ng khai" : "·∫®n").append("\n");
            exportData.append("   Premium: ").append(lesson.getLaBaiGiangGoi() ? "C√≥" : "Kh√¥ng").append("\n\n");
        }

        // Share the export data
        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType("text/plain");
        shareIntent.putExtra(Intent.EXTRA_TEXT, exportData.toString());
        shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Danh s√°ch b√†i gi·∫£ng");
        startActivity(Intent.createChooser(shareIntent, "Xu·∫•t danh s√°ch b√†i gi·∫£ng"));

        Toast.makeText(this, "ƒê√£ xu·∫•t d·ªØ li·ªáu", Toast.LENGTH_SHORT).show();
    }

    private String getFilterName(int filterType) {
        switch (filterType) {
            case 0: return "T·∫•t c·∫£ b√†i gi·∫£ng";
            case 1: return "B√†i c√¥ng khai";
            case 2: return "B√†i ·∫©n";
            case 3: return "B√†i Premium";
            case 4: return "B√†i mi·ªÖn ph√≠";
            default: return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    }

    private String getSortName(int sortType) {
        switch (sortType) {
            case 0: return "M·ªõi nh·∫•t";
            case 1: return "C≈© nh·∫•t";
            case 2: return "Nhi·ªÅu l∆∞·ª£t xem nh·∫•t";
            case 3: return "√çt l∆∞·ª£t xem nh·∫•t";
            case 4: return "T√™n A-Z";
            case 5: return "T√™n Z-A";
            default: return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    }

    // ===== DATA LOADING METHODS =====

    private void loadLessons() {
        Log.d(TAG, "üåê Loading lessons - page: " + currentPage);

        if (currentPage == 0) {
            progressBar.setVisibility(View.VISIBLE);
            tvEmptyMessage.setVisibility(View.GONE);
        }
        isLoading = true;

        controller.getMyBaiGiangs(currentPage, 10, "ngayTao", "desc",
                currentSearchQuery.isEmpty() ? null : currentSearchQuery,
                null, null, null, null);
    }

    private void loadMoreLessons() {
        if (hasMoreData && !isLoading) {
            currentPage++;
            loadLessons();
        }
    }

    private void searchLessons(String query) {
        currentSearchQuery = query;
        currentPage = 0;
        hasMoreData = true;
        lessonList.clear();
        adapter.notifyDataSetChanged();
        loadLessons();
    }

    private void refreshData() {
        currentPage = 0;
        hasMoreData = true;
        currentSearchQuery = "";
        loadLessons();
        loadStatistics();
    }

    private void loadStatistics() {
        controller.getStatistics();
    }

    // ===== UI HELPER METHODS =====

    private void showEmptyState(boolean show, String message) {
        tvEmptyMessage.setVisibility(show ? View.VISIBLE : View.GONE);
        rvLessons.setVisibility(show ? View.GONE : View.VISIBLE);
        if (show && message != null) {
            tvEmptyMessage.setText(message);
        }
    }

    private void updateStats(ApiService.TeacherBaiGiangResponse.StatsResponse stats) {
        if (stats != null && tvStats != null) {
            String statsText = String.format("T·ªïng: %d | C√¥ng khai: %d | Premium: %d | L∆∞·ª£t xem: %d",
                    stats.getTongSoBaiGiang(),
                    stats.getBaiGiangCongKhai(),
                    stats.getBaiGiangGoi(),
                    stats.getTongLuotXem());
            tvStats.setText(statsText);
            tvStats.setVisibility(View.VISIBLE);
        }
    }

    // ===== IMPLEMENT TeacherBaiGiangController.OnTeacherBaiGiangListener =====

    @Override
    public void onBaiGiangListReceived(ApiService.TeacherBaiGiangResponse.PageResponse response) {
        Log.d(TAG, "‚úÖ Received lesson list with " + response.getContent().size() + " items");

        isLoading = false;
        progressBar.setVisibility(View.GONE);
        swipeRefresh.setRefreshing(false);

        if (currentPage == 0) {
            lessonList.clear();
        }

        lessonList.addAll(response.getContent());
        adapter.notifyDataSetChanged();

        hasMoreData = !response.isLast();

        if (lessonList.isEmpty()) {
            showEmptyState(true, currentSearchQuery.isEmpty() ?
                    "Ch∆∞a c√≥ b√†i gi·∫£ng n√†o" : "Kh√¥ng t√¨m th·∫•y b√†i gi·∫£ng ph√π h·ª£p");
        } else {
            showEmptyState(false, null);
        }
    }

    @Override
    public void onBaiGiangDetailReceived(ApiService.TeacherBaiGiangResponse.DetailResponse baiGiang) {
        // Not used in this activity
    }

    @Override
    public void onBaiGiangCreated(ApiService.TeacherBaiGiangResponse.SimpleResponse baiGiang) {
        Log.d(TAG, "‚úÖ Lesson created: " + baiGiang.getTieuDe());
        Toast.makeText(this, "T·∫°o b√†i gi·∫£ng th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
        refreshData();
    }

    @Override
    public void onBaiGiangUpdated(ApiService.TeacherBaiGiangResponse.SimpleResponse baiGiang) {
        Log.d(TAG, "‚úÖ Lesson updated: " + baiGiang.getTieuDe());
        Toast.makeText(this, "C·∫≠p nh·∫≠t b√†i gi·∫£ng th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
        refreshData();
    }



    @Override
    public void onBaiGiangDeleted() {
        Log.d(TAG, "‚úÖ Lesson deleted");
        Toast.makeText(this, "X√≥a b√†i gi·∫£ng th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
        refreshData();
    }



    @Override
    public void onStatusToggled(ApiService.TeacherBaiGiangResponse.SimpleResponse baiGiang) {
        Log.d(TAG, "‚úÖ Status toggled for: " + baiGiang.getTieuDe());
        Toast.makeText(this, "Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
        refreshData();
    }

    @Override
    public void onBaiGiangDuplicated(ApiService.TeacherBaiGiangResponse.SimpleResponse baiGiang) {
        Log.d(TAG, "‚úÖ Lesson duplicated: " + baiGiang.getTieuDe());
        Toast.makeText(this, "Nh√¢n b·∫£n b√†i gi·∫£ng th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
        refreshData();
    }

    @Override
    public void onStatisticsReceived(ApiService.TeacherBaiGiangResponse.StatsResponse stats) {
        Log.d(TAG, "‚úÖ Statistics received");
        updateStats(stats);
    }

    @Override
    public void onSearchResultReceived(List<ApiService.TeacherBaiGiangResponse.SimpleResponse> results) {
        Log.d(TAG, "‚úÖ Search results received: " + results.size() + " items");
        // Handle search results if needed
    }

    @Override
    public void onError(String message) {
        Log.e(TAG, "‚ùå Error: " + message);

        isLoading = false;
        progressBar.setVisibility(View.GONE);
        swipeRefresh.setRefreshing(false);

        Toast.makeText(this, "L·ªói: " + message, Toast.LENGTH_LONG).show();

        if (lessonList.isEmpty()) {
            showEmptyState(true, "L·ªói t·∫£i d·ªØ li·ªáu: " + message);
        }
    }

    // ===== IMPLEMENT TeacherLessonAdapter.OnLessonActionListener =====

    @Override
    public void onLessonClick(ApiService.TeacherBaiGiangResponse.SimpleResponse lesson) {
        // View lesson detail
        Intent intent = new Intent(this, TeacherLessonDetailActivity.class);
        intent.putExtra("LESSON_ID", lesson.getId());
        startActivity(intent);
    }

    @Override
    public void onEditClick(ApiService.TeacherBaiGiangResponse.SimpleResponse lesson) {
        Intent intent = new Intent(this, TeacherCreateEditLessonActivity.class);
        intent.putExtra("LESSON_ID", lesson.getId());
        intent.putExtra("IS_EDIT_MODE", true);
        startActivityForResult(intent, REQUEST_EDIT_LESSON);
    }

    @Override
    public void onDeleteClick(ApiService.TeacherBaiGiangResponse.SimpleResponse lesson) {
        new AlertDialog.Builder(this)
                .setTitle("X√≥a b√†i gi·∫£ng")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i gi·∫£ng \"" + lesson.getTieuDe() + "\"?")
                .setPositiveButton("X√≥a", (dialog, which) -> {
                    progressBar.setVisibility(View.VISIBLE);
                    controller.deleteBaiGiang(lesson.getId());
                })
                .setNegativeButton("H·ªßy", null)
                .setIcon(R.drawable.ic_warning)
                .show();
    }

    @Override
    public void onToggleStatusClick(ApiService.TeacherBaiGiangResponse.SimpleResponse lesson) {
        String action = lesson.getTrangThai() ? "·∫©n" : "c√¥ng khai";
        new AlertDialog.Builder(this)
                .setTitle("Thay ƒë·ªïi tr·∫°ng th√°i")
                .setMessage("B·∫°n c√≥ mu·ªën " + action + " b√†i gi·∫£ng \"" + lesson.getTieuDe() + "\"?")
                .setPositiveButton("ƒê·ªìng √Ω", (dialog, which) -> {
                    controller.toggleStatus(lesson.getId());
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    @Override
    public void onTogglePremiumClick(ApiService.TeacherBaiGiangResponse.SimpleResponse lesson) {
        String action = lesson.getLaBaiGiangGoi() ? "mi·ªÖn ph√≠" : "premium";
        new AlertDialog.Builder(this)
                .setTitle("Thay ƒë·ªïi lo·∫°i b√†i gi·∫£ng")
                .setMessage("B·∫°n c√≥ mu·ªën chuy·ªÉn b√†i gi·∫£ng \"" + lesson.getTieuDe() + "\" th√†nh " + action + "?")
                .setPositiveButton("ƒê·ªìng √Ω", (dialog, which) -> {
                    controller.togglePremium(lesson.getId());
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    @Override
    public void onDuplicateClick(ApiService.TeacherBaiGiangResponse.SimpleResponse lesson) {
        // Show dialog to enter new title
        android.widget.EditText editText = new android.widget.EditText(this);
        editText.setHint("Ti√™u ƒë·ªÅ m·ªõi (t√πy ch·ªçn)");

        new AlertDialog.Builder(this)
                .setTitle("Nh√¢n b·∫£n b√†i gi·∫£ng")
                .setMessage("Nh√¢n b·∫£n b√†i gi·∫£ng \"" + lesson.getTieuDe() + "\"")
                .setView(editText)
                .setPositiveButton("Nh√¢n b·∫£n", (dialog, which) -> {
                    String newTitle = editText.getText().toString().trim();
                    controller.duplicateBaiGiang(lesson.getId(), newTitle.isEmpty() ? null : newTitle);
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    // ===== ACTIVITY RESULT =====

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            if (requestCode == REQUEST_ADD_LESSON || requestCode == REQUEST_EDIT_LESSON) {
                refreshData();
            }
        }
    }

    // ===== LIFECYCLE =====

    @Override
    protected void onResume() {
        super.onResume();
        // Refresh data when returning to this activity
        if (lessonList.size() > 0) {
            loadStatistics(); // Only refresh stats, not the whole list
        }
    }
}