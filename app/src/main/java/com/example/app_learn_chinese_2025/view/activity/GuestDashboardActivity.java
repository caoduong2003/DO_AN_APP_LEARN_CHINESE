package com.example.app_learn_chinese_2025.view.activity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.example.app_learn_chinese_2025.R;
import com.example.app_learn_chinese_2025.controller.GuestController;
import com.example.app_learn_chinese_2025.model.data.BaiGiang;
import com.example.app_learn_chinese_2025.model.data.TuVung;
import com.example.app_learn_chinese_2025.model.data.ChuDe;
import com.example.app_learn_chinese_2025.model.data.CapDoHSK;
import com.example.app_learn_chinese_2025.model.data.LoaiBaiGiang;
import com.example.app_learn_chinese_2025.util.GuestLimitationHelper;
import com.example.app_learn_chinese_2025.util.GuestUsageTracker;
import com.example.app_learn_chinese_2025.util.SessionManager;
import com.example.app_learn_chinese_2025.view.adapter.BaiGiangAdapter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * üöÄ Dashboard ch√≠nh cho Guest Mode
 */
public class GuestDashboardActivity extends AppCompatActivity implements
        GuestController.OnGuestDataListener, BaiGiangAdapter.OnBaiGiangItemClickListener {

    private static final String TAG = "GuestDashboardActivity";

    // UI Components
    private Toolbar toolbar;
    private TextView tvWelcome, tvUsageInfo, tvLimitationInfo;
    private Button btnUpgradeAccount, btnViewProfile;
    private SwipeRefreshLayout swipeRefreshLayout;
    private RecyclerView recyclerViewBaiGiang;
    private ProgressBar progressBar;

    // Data & Controllers
    private GuestController guestController;
    private GuestLimitationHelper limitationHelper;
    private SessionManager sessionManager;
    private BaiGiangAdapter baiGiangAdapter;
    private List<BaiGiang> baiGiangList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_guest_dashboard);

        Log.d(TAG, "üöÄ GuestDashboardActivity created");

        initViews();
        setupToolbar();
        setupRecyclerView();
        setupListeners();
        setupControllers();

        loadGuestData();
        setupUpgradePrompts();
    }

    private void initViews() {
        toolbar = findViewById(R.id.toolbar);
        tvWelcome = findViewById(R.id.tvWelcome);
        tvUsageInfo = findViewById(R.id.tvUsageInfo);
        tvLimitationInfo = findViewById(R.id.tvLimitationInfo);
        btnUpgradeAccount = findViewById(R.id.btnUpgradeAccount);
        btnViewProfile = findViewById(R.id.btnViewProfile);
        swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout);
        recyclerViewBaiGiang = findViewById(R.id.recyclerViewBaiGiang);
        progressBar = findViewById(R.id.progressBar);

        Log.d(TAG, "‚úÖ Views initialized");
    }

    private void setupToolbar() {
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Ch·∫ø ƒë·ªô kh√°ch");
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
        }

        Log.d(TAG, "‚úÖ Toolbar setup complete");
    }

    private void setupRecyclerView() {
        baiGiangList = new ArrayList<>();
        baiGiangAdapter = new BaiGiangAdapter(this, baiGiangList, this);

        recyclerViewBaiGiang.setLayoutManager(new LinearLayoutManager(this));
        recyclerViewBaiGiang.setAdapter(baiGiangAdapter);

        Log.d(TAG, "‚úÖ RecyclerView setup complete");
    }

    private void setupListeners() {
        btnUpgradeAccount.setOnClickListener(v -> {
            Log.d(TAG, "üéØ User clicked upgrade account");
            showUpgradeDialog();
        });

        btnViewProfile.setOnClickListener(v -> {
            Log.d(TAG, "üéØ User clicked view profile");
            showGuestProfileDialog();
        });

        swipeRefreshLayout.setOnRefreshListener(() -> {
            Log.d(TAG, "üîÑ User triggered refresh");
            loadGuestData();
        });

        Log.d(TAG, "‚úÖ Listeners setup complete");
    }

    private void setupControllers() {
        sessionManager = new SessionManager(this);
        guestController = new GuestController(this, this);
        limitationHelper = new GuestLimitationHelper(this);

        Log.d(TAG, "‚úÖ Controllers setup complete");
    }

    private void loadGuestData() {
        Log.d(TAG, "üìä Loading guest data");

        showLoading(true);

        // Load stats
        guestController.getGuestStats();

        // Load bai giang list
        guestController.getGuestBaiGiang(10, null, null);

        // Update usage info
        updateUsageInfo();
    }

    private void setupUpgradePrompts() {
        Log.d(TAG, "üéØ Setting up upgrade prompts");

        // Welcome tips cho l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng
        limitationHelper.showWelcomeTips(this);

        // Smart upgrade prompt
        limitationHelper.showSmartUpgradePrompt(this);

        Log.d(TAG, "‚úÖ Upgrade prompts setup complete");
    }

    private void updateUsageInfo() {
        GuestUsageTracker.UsageStats stats = limitationHelper.getUsageTracker().getTodayStats();
        GuestUsageTracker.RemainingUsage remaining = limitationHelper.getUsageTracker().getRemainingUsage();

        tvWelcome.setText("Ch√†o m·ª´ng, " + sessionManager.getDisplayName() + "!");

        String usageText = String.format("H√¥m nay: %d/%d b√†i gi·∫£ng ‚Ä¢ %d/%d l·∫ßn d·ªãch",
                stats.lessonsToday, stats.maxLessonsPerDay,
                stats.translationsToday, stats.maxTranslationsPerDay);
        tvUsageInfo.setText(usageText);

        String limitText = String.format("C√≤n l·∫°i: %d b√†i gi·∫£ng ‚Ä¢ %d l·∫ßn d·ªãch",
                remaining.remainingLessons, remaining.remainingTranslations);
        tvLimitationInfo.setText(limitText);

        Log.d(TAG, "üìä Usage info updated: " + usageText);
    }

    private void showLoading(boolean show) {
        progressBar.setVisibility(show ? View.VISIBLE : View.GONE);
        swipeRefreshLayout.setRefreshing(false);
    }

    private void showUpgradeDialog() {
        limitationHelper.showSmartUpgradePrompt(this);
    }

    private void showGuestProfileDialog() {
        GuestUsageTracker.UsageStats stats = limitationHelper.getUsageTracker().getTodayStats();

        String profileInfo = String.format(
                "Th√¥ng tin kh√°ch:\n\n" +
                        "‚Ä¢ Device ID: %s\n" +
                        "‚Ä¢ T·ªïng sessions: %d\n" +
                        "‚Ä¢ Ng√†y ƒë·∫ßu s·ª≠ d·ª•ng: %s\n" +
                        "‚Ä¢ B√†i gi·∫£ng h√¥m nay: %d/%d\n" +
                        "‚Ä¢ D·ªãch thu·∫≠t h√¥m nay: %d/%d",
                sessionManager.getGuestDeviceId(),
                stats.totalSessions,
                stats.firstUsageDate,
                stats.lessonsToday, stats.maxLessonsPerDay,
                stats.translationsToday, stats.maxTranslationsPerDay
        );

        new androidx.appcompat.app.AlertDialog.Builder(this)
                .setTitle("Th√¥ng tin ch·∫ø ƒë·ªô kh√°ch")
                .setMessage(profileInfo)
                .setPositiveButton("ƒêƒÉng k√Ω ngay", (dialog, which) -> {
                    startActivity(new Intent(this, RegisterActivity.class));
                })
                .setNegativeButton("ƒê√≥ng", null)
                .show();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.guest_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.action_upgrade) {
            showUpgradeDialog();
            return true;
        } else if (id == R.id.action_login) {
            startActivity(new Intent(this, LoginActivity.class));
            return true;
        } else if (id == R.id.action_register) {
            startActivity(new Intent(this, RegisterActivity.class));
            return true;
        } else if (id == R.id.action_refresh) {
            loadGuestData();
            return true;
        } else if (id == R.id.action_help) {
            showHelpDialog();
            return true;
        } else if (id == R.id.action_about) {
            showAboutDialog();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void showHelpDialog() {
        new androidx.appcompat.app.AlertDialog.Builder(this)
                .setTitle("Tr·ª£ gi√∫p")
                .setIcon(R.drawable.ic_help)
                .setMessage("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ch·∫ø ƒë·ªô kh√°ch:\n\n" +
                        "‚Ä¢ B·∫°n c√≥ th·ªÉ xem 3 b√†i gi·∫£ng m·ªói ng√†y\n" +
                        "‚Ä¢ M·ªói b√†i gi·∫£ng hi·ªÉn th·ªã 5 t·ª´ v·ª±ng ƒë·∫ßu ti√™n\n" +
                        "‚Ä¢ C√≥ th·ªÉ d·ªãch thu·∫≠t 10 l·∫ßn m·ªói ng√†y\n" +
                        "‚Ä¢ ƒêƒÉng k√Ω ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß!")
                .setPositiveButton("ƒêƒÉng k√Ω ngay", (dialog, which) -> {
                    startActivity(new Intent(this, RegisterActivity.class));
                })
                .setNegativeButton("ƒê√≥ng", null)
                .show();
    }

    private void showAboutDialog() {
        new androidx.appcompat.app.AlertDialog.Builder(this)
                .setTitle("Gi·ªõi thi·ªáu")
                .setIcon(R.drawable.ic_info)
                .setMessage("·ª®ng d·ª•ng H·ªçc Ti·∫øng Trung\n\n" +
                        "Phi√™n b·∫£n: 1.0.0\n" +
                        "Ph√°t tri·ªÉn b·ªüi: Nh√≥m ph√°t tri·ªÉn\n\n" +
                        "·ª®ng d·ª•ng gi√∫p b·∫°n h·ªçc ti·∫øng Trung m·ªôt c√°ch hi·ªáu qu·∫£ v·ªõi:\n" +
                        "‚Ä¢ B√†i gi·∫£ng phong ph√∫\n" +
                        "‚Ä¢ T·ª´ v·ª±ng chi ti·∫øt\n" +
                        "‚Ä¢ D·ªãch thu·∫≠t th√¥ng minh\n" +
                        "‚Ä¢ Theo d√µi ti·∫øn tr√¨nh")
                .setPositiveButton("ƒê√≥ng", null)
                .show();
    }

    // GuestController.OnGuestDataListener Implementation
    @Override
    public void onStatsLoaded(Map<String, Object> stats) {
        Log.d(TAG, "üìä Stats loaded: " + stats.toString());
        runOnUiThread(() -> {
            showLoading(false);
            updateUsageInfo();
        });
    }

    @Override
    public void onBaiGiangListLoaded(List<BaiGiang> baiGiangList) {
        Log.d(TAG, "üìö BaiGiang list loaded: " + baiGiangList.size() + " items");

        runOnUiThread(() -> {
            showLoading(false);
            this.baiGiangList.clear();
            this.baiGiangList.addAll(baiGiangList);
            baiGiangAdapter.notifyDataSetChanged();

            Toast.makeText(this, "T·∫£i ƒë∆∞·ª£c " + baiGiangList.size() + " b√†i gi·∫£ng",
                    Toast.LENGTH_SHORT).show();
        });
    }

    @Override
    public void onBaiGiangDetailLoaded(BaiGiang baiGiang) {
        Log.d(TAG, "üìñ BaiGiang detail loaded: " + baiGiang.getTieuDe());
        // Handle detail if needed
    }

    @Override
    public void onTuVungListLoaded(List<TuVung> tuVungList) {
        Log.d(TAG, "üìù TuVung list loaded: " + tuVungList.size() + " items");
        // Handle vocabulary if needed
    }

    @Override
    public void onChuDeListLoaded(List<ChuDe> chuDeList) {
        Log.d(TAG, "üè∑Ô∏è ChuDe list loaded: " + chuDeList.size() + " items");
        // Handle topics if needed
    }

    @Override
    public void onCapDoHSKListLoaded(List<CapDoHSK> capDoHSKList) {
        Log.d(TAG, "üìä CapDoHSK list loaded: " + capDoHSKList.size() + " items");
        // Handle HSK levels if needed
    }

    @Override
    public void onLoaiBaiGiangListLoaded(List<LoaiBaiGiang> loaiBaiGiangList) {
        Log.d(TAG, "üè∑Ô∏è LoaiBaiGiang list loaded: " + loaiBaiGiangList.size() + " items");
        // Handle lesson types if needed
    }

    @Override
    public void onError(String message) {
        Log.e(TAG, "‚ùå Error: " + message);

        runOnUiThread(() -> {
            showLoading(false);
            Toast.makeText(this, "L·ªói: " + message, Toast.LENGTH_SHORT).show();
        });
    }

    // BaiGiangAdapter.OnBaiGiangItemClickListener Implementation
    @Override
    public void onItemClick(BaiGiang baiGiang) {
        Log.d(TAG, "üéØ User clicked bai giang: " + baiGiang.getTieuDe());

        // Check limitation before accessing
        if (limitationHelper.checkAndShowLessonLimitation(this)) {
            // Record access
            limitationHelper.recordLessonAccess();

            // Update usage display
            updateUsageInfo();

            // Open lesson detail
            Intent intent = new Intent(this, GuestLessonDetailActivity.class);
            intent.putExtra("baiGiangId", baiGiang.getID());
            intent.putExtra("tieuDe", baiGiang.getTieuDe());
            startActivity(intent);
        }
    }

    @Override
    public void onEditClick(BaiGiang baiGiang) {
        // Not available in guest mode
        Toast.makeText(this, "Ch·ª©c nƒÉng ch·ªâ d√†nh cho t√†i kho·∫£n ƒë√£ ƒëƒÉng k√Ω",
                Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onDeleteClick(BaiGiang baiGiang) {
        // Not available in guest mode
        Toast.makeText(this, "Ch·ª©c nƒÉng ch·ªâ d√†nh cho t√†i kho·∫£n ƒë√£ ƒëƒÉng k√Ω",
                Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onPlayVideo(BaiGiang baiGiang) {
        Log.d(TAG, "üé• Playing video for: " + baiGiang.getTieuDe());
        // Handle video playback
    }

    @Override
    public void onPlayAudio(BaiGiang baiGiang) {
        Log.d(TAG, "üîä Playing audio for: " + baiGiang.getTieuDe());
        // Handle audio playback
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.d(TAG, "GuestDashboardActivity resumed");

        // Update usage info when returning to activity
        updateUsageInfo();

        // Check if user logged in
        if (sessionManager.isLoggedIn()) {
            Log.d(TAG, "User logged in, finishing guest dashboard");
            finish();
        }
    }

    @Override
    public void onBackPressed() {
        Log.d(TAG, "Back button pressed in guest dashboard");

        // Show exit confirmation
        new androidx.appcompat.app.AlertDialog.Builder(this)
                .setTitle("Tho√°t ·ª©ng d·ª•ng")
                .setMessage("B·∫°n c√≥ mu·ªën tho√°t kh·ªèi ·ª©ng d·ª•ng?")
                .setPositiveButton("Tho√°t", (dialog, which) -> {
                    super.onBackPressed();
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
}