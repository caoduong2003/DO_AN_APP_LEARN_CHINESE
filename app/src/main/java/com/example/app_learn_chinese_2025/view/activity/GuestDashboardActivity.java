package com.example.app_learn_chinese_2025.view.activity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.example.app_learn_chinese_2025.R;
import com.example.app_learn_chinese_2025.controller.GuestController;
import com.example.app_learn_chinese_2025.model.data.BaiGiang;
import com.example.app_learn_chinese_2025.model.data.TuVung;
import com.example.app_learn_chinese_2025.model.data.ChuDe;
import com.example.app_learn_chinese_2025.model.data.CapDoHSK;
import com.example.app_learn_chinese_2025.model.data.LoaiBaiGiang;
import com.example.app_learn_chinese_2025.util.GuestLimitationHelper;
import com.example.app_learn_chinese_2025.util.GuestUsageTracker;
import com.example.app_learn_chinese_2025.util.SessionManager;
import com.example.app_learn_chinese_2025.view.adapter.BaiGiangAdapter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * üöÄ Dashboard ch√≠nh cho Guest Mode
 */
public class GuestDashboardActivity extends AppCompatActivity implements
        GuestController.OnGuestDataListener, BaiGiangAdapter.OnBaiGiangItemClickListener {

    private static final String TAG = "GuestDashboardActivity";

    // UI Components
    private Toolbar toolbar;
    private TextView tvWelcome, tvUsageInfo, tvLimitationInfo;
    private Button btnUpgradeAccount, btnViewProfile;
    private SwipeRefreshLayout swipeRefreshLayout;
    private RecyclerView recyclerViewBaiGiang;
    private ProgressBar progressBar;

    // Data & Controllers
    private GuestController guestController;
    private GuestLimitationHelper limitationHelper;
    private SessionManager sessionManager;
    private BaiGiangAdapter baiGiangAdapter;
    private List<BaiGiang> baiGiangList;

    // üîß TH√äM BI·∫æN ƒê·ªÇ QU·∫¢N L√ù DIALOG V√Ä LIFECYCLE
    private AlertDialog currentDialog;
    private boolean isActivityDestroyed = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_guest_dashboard);

        Log.d(TAG, "üöÄ GuestDashboardActivity created");

        initViews();
        setupToolbar();
        setupRecyclerView();
        setupListeners();
        setupControllers();

        loadGuestData();
        setupUpgradePrompts();
    }

    private void initViews() {
        toolbar = findViewById(R.id.toolbar);
        tvWelcome = findViewById(R.id.tvWelcome);
        tvUsageInfo = findViewById(R.id.tvUsageInfo);
        tvLimitationInfo = findViewById(R.id.tvLimitationInfo);
        btnUpgradeAccount = findViewById(R.id.btnUpgradeAccount);
        btnViewProfile = findViewById(R.id.btnViewProfile);
        swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout);
        recyclerViewBaiGiang = findViewById(R.id.recyclerViewBaiGiang);
        progressBar = findViewById(R.id.progressBar);

        Log.d(TAG, "‚úÖ Views initialized");
    }

    private void setupToolbar() {
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Ch·∫ø ƒë·ªô kh√°ch");
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
        }

        Log.d(TAG, "‚úÖ Toolbar setup complete");
    }

    private void setupRecyclerView() {
        baiGiangList = new ArrayList<>();
        baiGiangAdapter = new BaiGiangAdapter(this, baiGiangList, this);

        recyclerViewBaiGiang.setLayoutManager(new LinearLayoutManager(this));
        recyclerViewBaiGiang.setAdapter(baiGiangAdapter);

        Log.d(TAG, "‚úÖ RecyclerView setup complete");
    }

    private void setupListeners() {
        btnUpgradeAccount.setOnClickListener(v -> {
            Log.d(TAG, "üéØ User clicked upgrade account");
            showUpgradeDialog();
        });

        btnViewProfile.setOnClickListener(v -> {
            Log.d(TAG, "üéØ User clicked view profile");
            showGuestProfileDialog();
        });

        swipeRefreshLayout.setOnRefreshListener(() -> {
            Log.d(TAG, "üîÑ User triggered refresh");
            loadGuestData();
        });

        Log.d(TAG, "‚úÖ Listeners setup complete");
    }

    private void setupControllers() {
        sessionManager = new SessionManager(this);
        guestController = new GuestController(this, this);
        limitationHelper = new GuestLimitationHelper(this);

        Log.d(TAG, "‚úÖ Controllers setup complete");
    }

    private void loadGuestData() {
        Log.d(TAG, "üìä Loading guest data");

        showLoading(true);

        // Load stats
        guestController.getGuestStats();

        // Load bai giang list
        guestController.getGuestBaiGiang(10, null, null);

        // Update usage info
        updateUsageInfo();
    }

    private void setupUpgradePrompts() {
        Log.d(TAG, "üéØ Setting up upgrade prompts");

        // Welcome tips cho l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng
        limitationHelper.showWelcomeTips(this);

        // Smart upgrade prompt
        limitationHelper.showSmartUpgradePrompt(this);

        Log.d(TAG, "‚úÖ Upgrade prompts setup complete");
    }

    private void updateUsageInfo() {
        GuestUsageTracker.UsageStats stats = limitationHelper.getUsageTracker().getTodayStats();
        GuestUsageTracker.RemainingUsage remaining = limitationHelper.getUsageTracker().getRemainingUsage();

        tvWelcome.setText("Ch√†o m·ª´ng, " + sessionManager.getDisplayName() + "!");

        String usageText = String.format("H√¥m nay: %d/%d b√†i gi·∫£ng ‚Ä¢ %d/%d l·∫ßn d·ªãch",
                stats.lessonsToday, stats.maxLessonsPerDay,
                stats.translationsToday, stats.maxTranslationsPerDay);
        tvUsageInfo.setText(usageText);

        String limitText = String.format("C√≤n l·∫°i: %d b√†i gi·∫£ng ‚Ä¢ %d l·∫ßn d·ªãch",
                remaining.remainingLessons, remaining.remainingTranslations);
        tvLimitationInfo.setText(limitText);

        Log.d(TAG, "üìä Usage info updated: " + usageText);
    }

    private void showLoading(boolean show) {
        progressBar.setVisibility(show ? View.VISIBLE : View.GONE);
        swipeRefreshLayout.setRefreshing(false);
    }

    private void showUpgradeDialog() {
        limitationHelper.showSmartUpgradePrompt(this);
    }

    private void showGuestProfileDialog() {
        // üîß SAFE CHECK TR∆Ø·ªöC KHI HI·ªÇN TH·ªä DIALOG
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        GuestUsageTracker.UsageStats stats = limitationHelper.getUsageTracker().getTodayStats();

        String profileInfo = String.format(
                "Th√¥ng tin kh√°ch:\n\n" +
                        "‚Ä¢ Device ID: %s\n" +
                        "‚Ä¢ T·ªïng sessions: %d\n" +
                        "‚Ä¢ Ng√†y ƒë·∫ßu s·ª≠ d·ª•ng: %s\n" +
                        "‚Ä¢ B√†i gi·∫£ng h√¥m nay: %d/%d\n" +
                        "‚Ä¢ D·ªãch thu·∫≠t h√¥m nay: %d/%d",
                sessionManager.getGuestDeviceId(),
                stats.totalSessions,
                stats.firstUsageDate,
                stats.lessonsToday, stats.maxLessonsPerDay,
                stats.translationsToday, stats.maxTranslationsPerDay
        );

        try {
            new AlertDialog.Builder(this)
                    .setTitle("Th√¥ng tin ch·∫ø ƒë·ªô kh√°ch")
                    .setMessage(profileInfo)
                    .setPositiveButton("ƒêƒÉng k√Ω ngay", (dialog, which) -> {
                        safeNavigateToRegister();
                    })
                    .setNegativeButton("ƒê√≥ng", null)
                    .show();
        } catch (Exception e) {
            Log.e(TAG, "Error showing profile dialog: " + e.getMessage());
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        try {
            getMenuInflater().inflate(R.menu.guest_menu, menu);
            return true;
        } catch (Exception e) {
            Log.e(TAG, "Error creating options menu: " + e.getMessage());
            return false;
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (isActivityDestroyed || isFinishing()) {
            return super.onOptionsItemSelected(item);
        }

        int id = item.getItemId();

        try {
            if (id == R.id.action_upgrade) {
                showUpgradeDialog();
                return true;
            } else if (id == R.id.action_login) {
                safeNavigateToLogin();
                return true;
            } else if (id == R.id.action_register) {
                safeNavigateToRegister();
                return true;
            } else if (id == R.id.action_refresh) {
                loadGuestData();
                return true;
            } else if (id == R.id.action_help) {
                showHelpDialog();
                return true;
            } else if (id == R.id.action_about) {
                showAboutDialog();
                return true;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error handling menu item: " + e.getMessage());
        }

        return super.onOptionsItemSelected(item);
    }

    private void showHelpDialog() {
        // üîß SAFE CHECK
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        try {
            new AlertDialog.Builder(this)
                    .setTitle("Tr·ª£ gi√∫p")
                    .setIcon(R.drawable.ic_help)
                    .setMessage("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ch·∫ø ƒë·ªô kh√°ch:\n\n" +
                            "‚Ä¢ B·∫°n c√≥ th·ªÉ xem 3 b√†i gi·∫£ng m·ªói ng√†y\n" +
                            "‚Ä¢ M·ªói b√†i gi·∫£ng hi·ªÉn th·ªã 5 t·ª´ v·ª±ng ƒë·∫ßu ti√™n\n" +
                            "‚Ä¢ C√≥ th·ªÉ d·ªãch thu·∫≠t 10 l·∫ßn m·ªói ng√†y\n" +
                            "‚Ä¢ ƒêƒÉng k√Ω ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß!")
                    .setPositiveButton("ƒêƒÉng k√Ω ngay", (dialog, which) -> {
                        safeNavigateToRegister();
                    })
                    .setNegativeButton("ƒê√≥ng", null)
                    .show();
        } catch (Exception e) {
            Log.e(TAG, "Error showing help dialog: " + e.getMessage());
        }
    }

    private void showAboutDialog() {
        // üîß SAFE CHECK
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        try {
            new AlertDialog.Builder(this)
                    .setTitle("Gi·ªõi thi·ªáu")
                    .setIcon(R.drawable.ic_info)
                    .setMessage("·ª®ng d·ª•ng H·ªçc Ti·∫øng Trung\n\n" +
                            "Phi√™n b·∫£n: 1.0.0\n" +
                            "Ph√°t tri·ªÉn b·ªüi: Nh√≥m ph√°t tri·ªÉn\n\n" +
                            "·ª®ng d·ª•ng gi√∫p b·∫°n h·ªçc ti·∫øng Trung m·ªôt c√°ch hi·ªáu qu·∫£ v·ªõi:\n" +
                            "‚Ä¢ B√†i gi·∫£ng phong ph√∫\n" +
                            "‚Ä¢ T·ª´ v·ª±ng chi ti·∫øt\n" +
                            "‚Ä¢ D·ªãch thu·∫≠t th√¥ng minh\n" +
                            "‚Ä¢ Theo d√µi ti·∫øn tr√¨nh")
                    .setPositiveButton("ƒê√≥ng", null)
                    .show();
        } catch (Exception e) {
            Log.e(TAG, "Error showing about dialog: " + e.getMessage());
        }
    }

    // GuestController.OnGuestDataListener Implementation
    @Override
    public void onStatsLoaded(Map<String, Object> stats) {
        Log.d(TAG, "üìä Stats loaded: " + stats.toString());
        runOnUiThread(() -> {
            if (!isActivityDestroyed && !isFinishing()) {
                showLoading(false);
                updateUsageInfo();
            }
        });
    }

    @Override
    public void onBaiGiangListLoaded(List<BaiGiang> baiGiangList) {
        Log.d(TAG, "üìö BaiGiang list loaded: " + baiGiangList.size() + " items");

        runOnUiThread(() -> {
            if (!isActivityDestroyed && !isFinishing()) {
                showLoading(false);
                this.baiGiangList.clear();
                this.baiGiangList.addAll(baiGiangList);
                baiGiangAdapter.notifyDataSetChanged();

                safeShowToast("T·∫£i ƒë∆∞·ª£c " + baiGiangList.size() + " b√†i gi·∫£ng");
            }
        });
    }

    @Override
    public void onBaiGiangDetailLoaded(BaiGiang baiGiang) {
        Log.d(TAG, "üìñ BaiGiang detail loaded: " + baiGiang.getTieuDe());
        // Handle detail if needed
    }

    @Override
    public void onTuVungListLoaded(List<TuVung> tuVungList) {
        Log.d(TAG, "üìù TuVung list loaded: " + tuVungList.size() + " items");
        // Handle vocabulary if needed
    }

    @Override
    public void onChuDeListLoaded(List<ChuDe> chuDeList) {
        Log.d(TAG, "üè∑Ô∏è ChuDe list loaded: " + chuDeList.size() + " items");
        // Handle topics if needed
    }

    @Override
    public void onCapDoHSKListLoaded(List<CapDoHSK> capDoHSKList) {
        Log.d(TAG, "üìä CapDoHSK list loaded: " + capDoHSKList.size() + " items");
        // Handle HSK levels if needed
    }

    @Override
    public void onLoaiBaiGiangListLoaded(List<LoaiBaiGiang> loaiBaiGiangList) {
        Log.d(TAG, "üè∑Ô∏è LoaiBaiGiang list loaded: " + loaiBaiGiangList.size() + " items");
        // Handle lesson types if needed
    }

    @Override
    public void onError(String message) {
        Log.e(TAG, "‚ùå Error: " + message);

        if (!isActivityDestroyed && !isFinishing()) {
            runOnUiThread(() -> {
                showLoading(false);
                safeShowToast("L·ªói: " + message);
            });
        }
    }

    // BaiGiangAdapter.OnBaiGiangItemClickListener Implementation
    @Override
    public void onItemClick(BaiGiang baiGiang) {
        Log.d(TAG, "üéØ User clicked bai giang: " + baiGiang.getTieuDe());

        // Check limitation before accessing
        if (limitationHelper.checkAndShowLessonLimitation(this)) {
            // Record access
            limitationHelper.recordLessonAccess();

            // Update usage display
            updateUsageInfo();

            // Open lesson detail
            try {
                Intent intent = new Intent(this, GuestLessonDetailActivity.class);
                intent.putExtra("baiGiangId", baiGiang.getID());
                intent.putExtra("tieuDe", baiGiang.getTieuDe());
                startActivity(intent);
            } catch (Exception e) {
                Log.e(TAG, "Error opening lesson detail: " + e.getMessage());
                safeShowToast("L·ªói m·ªü b√†i gi·∫£ng");
            }
        }
    }

    @Override
    public void onEditClick(BaiGiang baiGiang) {
        // Not available in guest mode
        safeShowToast("Ch·ª©c nƒÉng ch·ªâ d√†nh cho t√†i kho·∫£n ƒë√£ ƒëƒÉng k√Ω");
    }

    @Override
    public void onDeleteClick(BaiGiang baiGiang) {
        // Not available in guest mode
        safeShowToast("Ch·ª©c nƒÉng ch·ªâ d√†nh cho t√†i kho·∫£n ƒë√£ ƒëƒÉng k√Ω");
    }

    @Override
    public void onPlayVideo(BaiGiang baiGiang) {
        Log.d(TAG, "üé• Playing video for: " + baiGiang.getTieuDe());
        // Handle video playback
    }

    @Override
    public void onPlayAudio(BaiGiang baiGiang) {
        Log.d(TAG, "üîä Playing audio for: " + baiGiang.getTieuDe());
        // Handle audio playback
    }

    @Override
    protected void onResume() {
        super.onResume();

        // Reset destroyed flag
        isActivityDestroyed = false;

        Log.d(TAG, "GuestDashboardActivity resumed");

        // Update usage info when returning to activity
        updateUsageInfo();

        // Check if user logged in
        if (sessionManager.isLoggedIn()) {
            Log.d(TAG, "User logged in, finishing guest dashboard");
            finish();
        }
    }

    // üîß FIX CH√çNH: onBackPressed() KH√îNG G·ªåI super.onBackPressed() TR∆Ø·ªöC
    @Override
    public void onBackPressed() {
        Log.d(TAG, "Back button pressed in guest dashboard");

        // üö® KI·ªÇM TRA ACTIVITY KH√îNG B·ªä DESTROY
        if (isActivityDestroyed || isFinishing()) {
            Log.w(TAG, "Activity is finishing or destroyed, skipping dialog");
            super.onBackPressed();
            return;
        }

        // üîß DISMISS DIALOG C≈® N·∫æU T·ªíN T·∫†I
        if (currentDialog != null && currentDialog.isShowing()) {
            currentDialog.dismiss();
            currentDialog = null;
        }

        // üéØ T·∫†O DIALOG M·ªöI V·ªöI SAFE CHECK
        try {
            currentDialog = new AlertDialog.Builder(this)
                    .setTitle("Tho√°t ch·∫ø ƒë·ªô kh√°ch")
                    .setMessage("B·∫°n mu·ªën:")
                    .setPositiveButton("ƒêƒÉng nh·∫≠p/ƒêƒÉng k√Ω", (dialog, which) -> {
                        // Quay v·ªÅ Welcome ƒë·ªÉ ƒëƒÉng nh·∫≠p
                        safeBackToWelcome();
                    })
                    .setNegativeButton("Tho√°t ·ª©ng d·ª•ng", (dialog, which) -> {
                        // Tho√°t ho√†n to√†n
                        safeFinishAffinity();
                    })
                    .setNeutralButton("·ªû l·∫°i", (dialog, which) -> {
                        // Ch·ªâ dismiss dialog
                        if (dialog != null) {
                            dialog.dismiss();
                        }
                    })
                    .setOnDismissListener(dialog -> {
                        // Clear reference khi dialog b·ªã dismiss
                        currentDialog = null;
                    })
                    .create();

            // üö® HI·ªÇN TH·ªä DIALOG CH·ªà KHI ACTIVITY KH√îNG B·ªä DESTROY
            if (!isActivityDestroyed && !isFinishing()) {
                currentDialog.show();
            }

        } catch (Exception e) {
            Log.e(TAG, "Error showing dialog: " + e.getMessage());
            // Fallback: tho√°t tr·ª±c ti·∫øp
            super.onBackPressed();
        }
    }

    /**
     * üîô Safe method ƒë·ªÉ quay v·ªÅ Welcome
     */
    private void safeBackToWelcome() {
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        try {
            Log.d(TAG, "Going back to Welcome screen");

            // Clear guest session
            if (sessionManager != null) {
                sessionManager.clearSession();
            }

            // Navigate to Welcome Activity
            Intent intent = new Intent(this, GuestWelcomeActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            startActivity(intent);
            finish();

        } catch (Exception e) {
            Log.e(TAG, "Error navigating to welcome: " + e.getMessage());
            finish();
        }
    }

    /**
     * üö™ Safe method ƒë·ªÉ tho√°t app
     */
    private void safeFinishAffinity() {
        try {
            finishAffinity();
        } catch (Exception e) {
            Log.e(TAG, "Error finishing affinity: " + e.getMessage());
            finish();
        }
    }

    /**
     * üéØ Safe method ƒë·ªÉ chuy·ªÉn ƒë·∫øn Login
     */
    private void safeNavigateToLogin() {
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        try {
            Intent intent = new Intent(this, LoginActivity.class);
            startActivity(intent);
        } catch (Exception e) {
            Log.e(TAG, "Error navigating to login: " + e.getMessage());
        }
    }

    /**
     * üéØ Safe method ƒë·ªÉ chuy·ªÉn ƒë·∫øn Register
     */
    private void safeNavigateToRegister() {
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        try {
            Intent intent = new Intent(this, RegisterActivity.class);
            startActivity(intent);
        } catch (Exception e) {
            Log.e(TAG, "Error navigating to register: " + e.getMessage());
        }
    }

    /**
     * üçû Safe method ƒë·ªÉ hi·ªÉn th·ªã Toast
     */
    private void safeShowToast(String message) {
        if (isActivityDestroyed || isFinishing()) {
            return;
        }

        try {
            runOnUiThread(() -> {
                if (!isActivityDestroyed && !isFinishing()) {
                    Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
                }
            });
        } catch (Exception e) {
            Log.e(TAG, "Error showing toast: " + e.getMessage());
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // üîß MARK ACTIVITY AS DESTROYED
        isActivityDestroyed = true;

        // üîß DISMISS DIALOG N·∫æU V·∫™N ƒêANG HI·ªÇN TH·ªä
        if (currentDialog != null && currentDialog.isShowing()) {
            try {
                currentDialog.dismiss();
            } catch (Exception e) {
                Log.e(TAG, "Error dismissing dialog in onDestroy: " + e.getMessage());
            } finally {
                currentDialog = null;
            }
        }

        Log.d(TAG, "GuestDashboardActivity destroyed safely");
    }

    @Override
    protected void onPause() {
        super.onPause();

        // üîß DISMISS DIALOG KHI ACTIVITY PAUSE
        if (currentDialog != null && currentDialog.isShowing()) {
            try {
                currentDialog.dismiss();
                currentDialog = null;
            } catch (Exception e) {
                Log.e(TAG, "Error dismissing dialog in onPause: " + e.getMessage());
            }
        }
    }

    @Override
    protected void onStop() {
        super.onStop();

        // üîß EXTRA SAFETY: DISMISS DIALOG KHI ACTIVITY STOP
        if (currentDialog != null && currentDialog.isShowing()) {
            try {
                currentDialog.dismiss();
                currentDialog = null;
            } catch (Exception e) {
                Log.e(TAG, "Error dismissing dialog in onStop: " + e.getMessage());
            }
        }
    }
}